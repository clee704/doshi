@font-face {
  font-family: 'NanumBarunGothic';
  font-style: normal;
  font-weight: 400;
  src: url(/styles/fonts/NanumBarunGothic.ttf) format('truetype');
}
@font-face {
  font-family: 'NanumBarunGothic';
  font-style: normal;
  font-weight: 700;
  src: url(/styles/fonts/NanumBarunGothicBold.ttf) format('truetype');
}

$font-family-sans-serif: "Apple SD Gothic Neo", "NanumBarunGothic", 나눔바른고딕, "NanumGothic", "나눔고딕", "08SeoulNamsan", "08서울남산체", "Malgun Gothic", "맑은 고딕", "Helvetica Neue", Helvetica, Arial, sans-serif;
$font-size-base: 13px;
$line-height-base: 1.5384615385; // 20/13
$font-size-h1: 17px;
$font-size-h2: 15px;
// $icon-font-path: "/bower_components/sass-bootstrap/fonts/";
@import 'sass-bootstrap/lib/bootstrap';

$fa-font-path: "/bower_components/font-awesome/fonts";
@import 'font-awesome/scss/font-awesome';

body {
  padding: 20px 0 40px;
  overflow-x: hidden;
  overflow-y: auto;
}

.container {
  max-width: $container-md;
}

input[type="text"],
input[type="number"] {
  -webkit-appearance: none;
}

input[type="number"] {
  text-align: right;
}

label {
  font-weight: normal;
}

.btn-link {
  &:hover {
    text-decoration: none;
  }
}

.progress-bar {
  &.transition-disabled {
    @include transition(none);
  }
}

span.hidden-xs {
  @media (min-width: $screen-sm-min) {
    display: inline !important;
  }
}

.form-horizontal {
  .control-label {
    margin-bottom: 5px !important;
    @media (min-width: $screen-sm-min) {
      margin-bottom: 0 !important;
    }
  }
}

.page-title {
  color: #888;
  margin: 0;
  margin-bottom: $line-height-computed;
  white-space: nowrap;
  @media (min-width: $screen-sm-min) {
    line-height: 40px;
    margin-bottom: 0;
  }
}

.view-wrapper {
  position: relative;
  min-height: 480px;
}

.view {
  position: relative;
  z-index: 15;

  &.ng-enter,
  &.ng-leave {
    @include transition(.4s all);
  }
  &.ng-enter {
    opacity: 0;
  }
  &.ng-enter.ng-enter-active {
    opacity: 1;
  }
  &.ng-leave {
    position: absolute;
    z-index: 10;
    width: 100%;
    opacity: 1;
  }
  &.ng-leave.ng-leave-active {
    opacity: 0;
  }

  .forward & {
    &.ng-enter {
      // The exact amount of translation is computed by script (See controllers/nav.js)
      @include translate(1px, 0);
    }
    &.ng-enter.ng-enter-active {
      @include translate(0, 0);
    }
    &.ng-leave {
      @include translate(0, 0);
    }
    &.ng-leave.ng-leave-active {
      @include translate(-1px, 0);
    }
  }
  // Don't change the order of rules.
  // .forward .view.ng-leave.ng-leave-active and .backward .view.ng-enter
  // should not be merged (cssmin merges them if they are adjacent to each other).
  .backward & {
    &.ng-leave {
      @include translate(0, 0);
    }
    &.ng-leave.ng-leave-active {
      @include translate(1px, 0);
    }
    &.ng-enter {
      @include translate(-1px, 0);
    }
    &.ng-enter.ng-enter-active {
      @include translate(0, 0);
    }
  }
}

.nav-pills {
  position: relative;
  z-index: 20;
  margin-bottom: $line-height-computed;
  > li > a {
    background-color: $body-bg;
    position: relative;
  }
  > li + li {
    margin-left: 0;
  }
  .notch-wrapper {
    position: absolute;
  }
  .notch {
    position: absolute;
    z-index: 30;
    // Hack for Firefox: Fix incorrect color and apply anti-aliasing
    -moz-transform: scale(.9999);
  }
  // 1px Offset Hack for IE: Remove faint border between nav item and notch
  @media (max-width: $screen-xs-max) {
    $notch-width: 37px;
    $notch-height: 6px;
    .notch-wrapper {
      bottom: 0;
      left: 50%;
    }
    .notch {
      bottom: -($notch-height - 1px);
      left: -($notch-width);
      border-width: ($notch-height + 1px) $notch-width 0 $notch-width;
      border-style: solid;
      border-color: transparent;
    }
    > li > a:hover .notch,
    > li > a:focus .notch {
      border-top-color: $nav-link-hover-bg;
    }
    > li.active > a .notch {
      border-top-color: $nav-pills-active-link-hover-bg;
    }
  }
  @media (min-width: $screen-sm-min) {
    $notch-width: 20px;
    $notch-height: 6px;
    .notch-wrapper {
      top: 50%;
      right: 0;
    }
    .notch {
      top: -($notch-width);
      right: -($notch-height - 1px);
      border-width: $notch-width 0 $notch-width ($notch-height + 1px);
      border-style: solid;
      border-color: transparent;
    }
    > li > a:hover .notch,
    > li > a:focus .notch {
      border-left-color: $nav-link-hover-bg;
    }
    > li.active > a .notch {
      border-left-color: $nav-pills-active-link-hover-bg;
    }
  }
}

.view-pagination {
  margin-bottom: $line-height-computed;
}

.input-courses-and-classes {
  min-height: 200px;

  .list-group-item {
    overflow: hidden;
    position: relative;
    z-index: 40;
    .close {
      outline: 0;
    }

    // Workaround for animation
    padding: 0;
    .list-group-item-inner {
      padding: 10px 15px;
    }
  }

  .list-group-item:not(.empty) {
    &.ng-enter,
    &.ng-leave {
      @include transition(.4s all);
    }
    &.ng-enter-stagger,
    &.ng-leave-stagger {
      @include transition-delay(.05s);
      @include transition-duration(0);
    }
    &.ng-enter {
      opacity: 0;
      @include translate(-400px, 0);
    }
    &.ng-enter.ng-enter-active {
      opacity: 1;
      @include translate(0, 0);
    }
    &.ng-leave {
      // Height is computed on-the-fly by script (See controllers/main.js)
      height: auto;
      margin-bottom: -1px;
      &:last-child {
        z-index: 39;
        margin-bottom: 0;
        margin-top: 0;
      }
    }
    &.ng-leave.ng-leave-active {
      height: 0;
      margin-bottom: -2px;
      &:last-child {
        margin-bottom: 0;
        margin-top: -2px;
      }
    }
  }

  .list-group-item.empty {
    &.ng-enter {
      @include transition(.4s opacity);
      opacity: 0;
    }
    &.ng-enter.ng-enter-active {
      opacity: 1;
    }
  }
}

.table {
  > thead,
  > tbody {
    > tr {
      > th,
      > td {
        font-weight: normal;
        text-align: center;
        vertical-align: middle;
      }
    }
  }
  > thead,
  > tbody, {
    > tr {
      > th {
        background-color: $gray-lighter;
      }
    }
  }
  > thead > tr > th {
    border-bottom-width: 1px;
  }
}

.timetable {
  > tbody > tr > td {
    padding-left: ($table-cell-padding / 2) !important;
    padding-right: ($table-cell-padding / 2) !important;
  }
  .course,
  .class {
    display: inline-block;
    margin: 1px 4px;
    line-height: 1;
    white-space: nowrap;
  }
  .classes {
    display: inline-block;
  }
}

.input-timetable {
  td {
    cursor: pointer;
    &.selected {
      cursor: default;
      .course,
      .class {
        cursor: pointer;
        color: $gray-light;
        padding: 2px 4px;
        margin: 0 1px;
        border-radius: 1px;
        &.selected {
          color: #000;
          background-color: #ffdc5c;
        }
      }
    }
  }
}

.output-timetable {
  > tbody > tr > td {
    padding: 0 !important;
  }
  @media print {
    .course-classes td {
      border: 0 !important;
    }
  }
  .course-classes {
    width: 100%;
    // height is set to 100% by script
    td {
      border-bottom: 1px dotted lighten($table-border-color, 5%) !important;
      padding: $table-cell-padding;
    }
    tr:last-child td {
      border-bottom: 0 !important;
    }
  }
  td.highlight {
    background-color: $state-success-bg;
  }
  .course,
  .class {
    cursor: pointer;
    &.highlight {
      color: darken($state-success-text, 10%);
      font-weight: bold;
    }
  }
}

.controls {
  margin-bottom: $line-height-computed;
  .fa-spinner {
    margin-left: 10px;
  }
}
